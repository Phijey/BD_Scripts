USE CLASSICMODELS;


CREATE TABLE CARRINHO_DE_COMPRA(
IDPRODUTO VARCHAR(10) NOT NULL,
QUANTIDADE INT NOT NULL,
PRECO DECIMAL(7,2),
IDCLIENTE INT NOT NULL,
PRIMARY KEY (IDPRODUTO, IDCLIENTE),
FOREIGN KEY (IDPRODUTO) REFERENCES PRODUCTS(PRODUCTCODE),
FOREIGN KEY (IDCLIENTE) REFERENCES CUSTOMERS(CUSTOMERNUMBER)
);


CREATE TABLE RESULTADO_DO_ITEM_PEDIDO(
IDPRODUTO VARCHAR(10) NOT NULL,
QUANTIDADE INT NOT NULL,
PRECO DECIMAL(7,2),
IDCLIENTE INT NOT NULL
);

DELIMITER $

CREATE PROCEDURE GERAR_PEDIDO(
IN PARAM_IDCLIENTE INT, 
IN PARAM_IDVENDEDOR INT, 
oUT RESULTADO_DO_ITEM_PEDIDO VARCHAR(200)
)
BEGIN
DECLARE VAR_NUMEROPEDIDO INT;
DECLARE VAR_CODIGOPRODUTO VARCHAR(10);
DECLARE VAR_QUANTIDADE INT;
DECLARE VAR_PRECO FLOAT;
DECLARE CONTADOR INT DEFAULT 0;
DECLARE CURSOR_FINAL INT DEFAULT 0;
    
   
DECLARE CARRINHO_CURSOR CURSOR FOR
SELECT IDPRODUTO, QUANTIDADE, PRECO
FROM CARRINHO_DE_COMPRA
WHERE IDCLIENTE = PARAM_IDCLIENTE;
    
    
DECLARE CONTINUE HANDLER FOR NOT FOUND SET CURSOR_FINAL = 1;

  
IF NOT EXISTS (SELECT 1 FROM CUSTOMERS WHERE CUSTOMERNUMBER = PARAM_IDCLIENTE) THEN
SET RESULTADO_DO_ITEM_PEDIDO = 'CLIENTE NÃO ENCONTRADO NA BASE DE DADOS';
ELSE IF NOT EXISTS (SELECT 1 FROM EMPLOYEES WHERE EMPLOYEENUMBER = PARAM_IDVENDEDOR AND JOBTITLE = 'SALES REP') THEN
SET RESULTADO_DO_ITEM_PEDIDO = 'VENDEDOR NÃO ENCONTRADO NA BASE DE DADOS';
eLSE IF NOT EXISTS (SELECT 1 FROM CARRINHO_DE_COMPRA WHERE IDCLIENTE = PARAM_IDCLIENTE) THEN
SET RESULTADO_DO_ITEM_PEDIDO = 'CARRINHO_DE_COMPRA NÃO PERTENCE AO CLIENTE';
ELSE
        
START TRANSACTION;

       
SELECT MAX(ORDERNUMBER) + 1 INTO VAR_NUMEROPEDIDO FROM ORDERS;
INSERT INTO ORDERS(ORDERNUMBER, ORDERDATE, REQUIREDDATE, STATUS, COMMENTS, CUSTOMERNUMBER) 
VALUES (VAR_NUMEROPEDIDO, CURDATE(), CURDATE(), 'IN PROCESS', 'IN PROCESS', PARAM_IDCLIENTE);

      
OPEN CARRINHO_CURSOR;

       
FETCH CARRINHO_CURSOR INTO VAR_CODIGOPRODUTO, VAR_QUANTIDADE, VAR_PRECO;
WHILE CURSOR_FINAL = 0 DO
           
CALL GERAR_ITEM_PEDIDO(VAR_CODIGOPRODUTO, VAR_QUANTIDADE, VAR_PRECO, VAR_NUMEROPEDIDO, (CONTADOR + 1));
SET CONTADOR = CONTADOR + 1;
FETCH CARRINHO_CURSOR INTO VAR_CODIGOPRODUTO, VAR_QUANTIDADE, VAR_PRECO;
END WHILE;

CLOSE CARRINHO_CURSOR;

uPDATE CUSTOMERS SET SALESREPEMPLOYEENUMBER = PARAM_IDVENDEDOR WHERE CUSTOMERNUMBER = PARAM_IDCLIENTE;

        
SET RESULTADO_DO_ITEM_PEDIDO = CONCAT('PEDIDO GERADO COM SUCESSO: ', VAR_NUMEROPEDIDO);
    
 COMMIT;
 END IF;
 END IF;
 END IF;
END$
DELIMITER ;


DELIMITER $


CREATE PROCEDURE GERAR_ITEM_PEDIDO(
IN PARAM_CODIGOPRODUTO VARCHAR(50), 
IN PARAM_QUANTIDADE INT, 
IN PARAM_PRECO FLOAT, 
IN PARAM_NUMEROPEDIDO INT, 
IN PARAM_LINHA INT
)
BEGIN
DECLARE VAR_ESTOQUE INT;
 DECLARE VAR_CODIGOCLIENTE INT;

    
 IF EXISTS (SELECT 1 FROM PRODUCTS WHERE PRODUCTCODE = PARAM_CODIGOPRODUTO) THEN
  SELECT QUANTITYINSTOCK INTO VAR_ESTOQUE FROM PRODUCTS WHERE PRODUCTCODE = PARAM_CODIGOPRODUTO;
        
IF(VAR_ESTOQUE >= PARAM_QUANTIDADE) THEN
           
INSERT INTO ORDERDETAILS(ORDERNUMBER, PRODUCTCODE, QUANTITYORDERED, PRICEEACH, ORDERLINENUMBER) 
 VALUES(PARAM_NUMEROPEDIDO, PARAM_CODIGOPRODUTO, PARAM_QUANTIDADE, PARAM_PRECO, PARAM_LINHA);
            
           
UPDATE PRODUCTS SET QUANTITYINSTOCK = (VAR_ESTOQUE - PARAM_QUANTIDADE) 
WHERE PRODUCTCODE = PARAM_CODIGOPRODUTO;
            
           
SELECT IDCLIENTE INTO VAR_CODIGOCLIENTE FROM CARRINHO_DE_COMPRA LIMIT 1;
INSERT INTO RESULTADO_DO_ITEM_PEDIDO(IDPRODUTO, QUANTIDADE, PRECO, IDCLIENTE) 
VALUES(PARAM_CODIGOPRODUTO, PARAM_QUANTIDADE, PARAM_PRECO, VAR_CODIGOCLIENTE);
END IF;
END IF;
END$
DELIMITER ;


DELETE FROM RESULTADO_DO_ITEM_PEDIDO;


INSERT INTO CARRINHO_DE_COMPRA VALUES('S10_1678', 15, 70.00, 112);
INSERT INTO CARRINHO_DE_COMPRA VALUES('S10_4757', 30, 200.00, 112);
INSERT INTO CARRINHO_DE_COMPRA VALUES('S18_3140', 20, 15.00, 112);


CALL GERAR_PEDIDO(112, 1166, @RESPOSTA);


SELECT @RESPOSTA;

DELIMITER $
CREATE TRIGGER TRG_AFTER_INSERT_ORDERS
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
 INSERT INTO LOG_ORDERS (ORDERNUMBER, OPERATION, OPERATION_DATE)
 VALUES (NEW.ORDERNUMBER, 'INSERT', NOW());
END$
DELIMITER ;

DELIMITER $
CREATE TRIGGER TRG_AFTER_INSERT_ORDERDETAILS
AFTER INSERT ON ORDERDETAILS
FOR EACH ROW
BEGIN
INSERT INTO LOG_ORDERDETAILS (ORDERNUMBER, PRODUCTCODE, OPERATION, OPERATION_DATE)
VALUES (NEW.ORDERNUMBER, NEW.PRODUCTCODE, 'INSERT', NOW());
END$
DELIMITER ;

DELIMITER $
CREATE TRIGGER TRG_AFTER_UPDATE_CUSTOMERS
AFTER UPDATE ON CUSTOMERS
FOR EACH ROW
BEGIN
 INSERT INTO LOG_CUSTOMERS (CUSTOMERNUMBER, OPERATION, OPERATION_DATE)
VALUES (NEW.CUSTOMERNUMBER, 'UPDATE', NOW());
END$
DELIMITER ;

DELIMITER $
CREATE TRIGGER TRG_AFTER_UPDATE_PRODUCTS
AFTER UPDATE ON PRODUCTS
FOR EACH ROW
BEGIN
INSERT INTO LOG_PRODUCTS (PRODUCTCODE, OPERATION, OPERATION_DATE)
VALUES (NEW.PRODUCTCODE, 'UPDATE', NOW());
END$
DELIMITER ;

CREATE TABLE LOG_ORDERS (
 LOG_ID INT AUTO_INCREMENT PRIMARY KEY,
ORDERNUMBER INT NOT NULL,
OPERATION VARCHAR(10) NOT NULL,
OPERATION_DATE DATETIME NOT NULL
);

CREATE TABLE LOG_ORDERDETAILS (
LOG_ID INT AUTO_INCREMENT PRIMARY KEY,
ORDERNUMBER INT NOT NULL,
PRODUCTCODE VARCHAR(10) NOT NULL,
OPERATION VARCHAR(10) NOT NULL,
OPERATION_DATE DATETIME NOT NULL
);

CREATE TABLE LOG_CUSTOMERS (
LOG_ID INT AUTO_INCREMENT PRIMARY KEY,
CUSTOMERNUMBER INT NOT NULL,
OPERATION VARCHAR(10) NOT NULL,
OPERATION_DATE DATETIME NOT NULL
);

CREATE TABLE LOG_PRODUCTS (
LOG_ID INT AUTO_INCREMENT PRIMARY KEY,
PRODUCTCODE VARCHAR(10) NOT NULL,
OPERATION VARCHAR(10) NOT NULL,
OPERATION_DATE DATETIME NOT NULL
);

